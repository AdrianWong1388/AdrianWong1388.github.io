[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Homepage",
    "section": "",
    "text": "My name is Adrian Ian Wong Sye En. I am currently study in Year1 Applied AI course from SIT.\nBelow is the module I have learnt throughout my journey in SIT:\n\nWeb System\nDescription:\n\nThis course likely covers the fundamentals of web development, including both front-end and back-end technologies. You would learn about HTML, CSS, and JavaScript for building interactive and responsive user interfaces (UIs) on the web. Additionally, you might delve into server-side programming languages like PHP, Python (with frameworks like Django or Flask), or JavaScript (with Node.js) to build dynamic web applications.\n\nKey Concepts:\n\nHTML (Hypertext Markup Language)\nCSS (Cascading Style Sheets)\nJavaScript (and possibly libraries/frameworks like React, Vue.js, or Angular)\nServer-side programming (e.g., PHP, Python, Node.js)\nDatabases and data storage (e.g., SQL, NoSQL)\n\nSkills Developed:\n\nFront-end development skills\nBack-end development skills\nUnderstanding of web architecture and protocols\nDatabase management and integration\nProblem-solving and debugging in web development contexts\n\n\n\nMachine Learning\nDescription:\n\nMachine learning is a subfield of artificial intelligence (AI) that focuses on the development of algorithms and statistical models that enable computers to learn from and make predictions or decisions based on data. In this course, you would study various machine learning algorithms, techniques for data preprocessing and feature engineering, model evaluation, and practical applications of machine learning.\n\nKey Concepts:\n\nSupervised learning (e.g., regression, classification)\nUnsupervised learning (e.g., clustering, dimensionality reduction)\nModel evaluation and validation\nFeature engineering and selection\nDeep learning and neural networks (if covered)\n\nSkills Developed:\n\nUnderstanding of machine learning concepts and algorithms\nAbility to implement machine learning models using libraries like scikit-learn or TensorFlow\nData preprocessing and feature engineering skills\nModel evaluation and interpretation\n\n\n\nLinear Algebra\nDescription:\n\nLinear algebra is a branch of mathematics that deals with vectors, matrices, and linear transformations. In the context of AI and machine learning, linear algebra plays a crucial role in understanding and implementing algorithms for data manipulation, optimization, and model representation.\n\nKey Concepts:\n\nVectors and matrices\nLinear transformations\nEigenvalues and eigenvectors\nMatrix operations (e.g., addition, multiplication)\nApplications in solving systems of linear equations and optimization problems\n\nSkills Developed:\n\nUnderstanding of fundamental linear algebra concepts\nAbility to perform matrix operations and solve linear equations\nApplication of linear algebra in AI and machine learning contexts\n\n\n\nDiscrete Math\nDescription:\n\nDiscrete mathematics is a branch of mathematics that deals with discrete structures and countable sets. In the context of computer science and AI, discrete mathematics provides the theoretical foundation for understanding algorithms, logic, and combinatorial problems.\n\nKey Concepts:\n\nSet theory\nLogic and propositional calculus\nCombinatorics (e.g., permutations, combinations)\nGraph theory\nNumber theory\n\nSkills Developed:\n\nAbility to apply logical reasoning and mathematical proofs\nUnderstanding of discrete structures and their properties\nProblem-solving skills in combinatorial and graph-related problems\n\n\n\nObject-Oriented Programming\nDescription:\n\nObject-oriented programming (OOP) is a programming paradigm based on the concept of “objects,” which can contain data and code to manipulate that data. In this course, you would learn about the principles of OOP, including encapsulation, inheritance, and polymorphism, and how to apply them in software development using object-oriented programming languages like Java, C++, or Python.\n\nKey Concepts:\n\nClasses and objects\nEncapsulation\nInheritance\nPolymorphism\nAbstraction\n\nSkills Developed:\n\nProficiency in designing and implementing object-oriented solutions to software problems\nUnderstanding of class hierarchies and inheritance relationships\nAbility to use OOP principles to create reusable and maintainable code"
  },
  {
    "objectID": "hobby.html",
    "href": "hobby.html",
    "title": "Hobby",
    "section": "",
    "text": "My hobby is studying mathematics.\nAt the moment, I am self-studying calculus and linear algebra, and I plan to study real analysis and complex analysis afterward.\nBelow are some notes I have made in both English and Chinese during my study of calculus:\n\nChapter 1 Functions and Models 函數與模型\n\n\n1.1 Four Ways to Represent a Function 四種表示函數的方法\nDefinition of Function 函數的定義\nA function \\(f\\) is a rule that assign to each element \\(x\\) in a set \\(D\\) exactly one element, \\(f(x)\\) in set \\(R.\\)\n函數 f 是一個為集合 D 中的每個元素 x 分配一個元素，即集合 R 中的 f(x) 的規則。\nx: independent variable\nf(x): dependent variable\nset D: Domain\nset R: Range\n\nRepresentation of Functions 表示函數的方法\n\nverbally 语言描述\nnumerically 数值表示\nvisually 图形表示\nalgebraically 代数表示\n\n\nRule to Define Function 定義函數的規則\nVertical Line Test 垂線測試\nA curve in the xy-plane is the graph of a function of x if and only if no vertical line intersects the curve more than once.\nxy 平面中的曲線是 x 函數的圖形，當且僅當沒有垂直線與曲線多次相交時。\n\n\n\nVertical Line Test\n\n\n\nPiecewise Defined Function 分段定義函數\nA function defined by different formulas in different parts of their domains.\n在域的不同部分用不同公式定義的函數。\n\\[\nf(x) = \\begin{cases}\n    1-x, & \\text{if } x \\leq 0 \\\\\n    x^2, & \\text{if } x &gt; 0\n\\end{cases}\n\\]\nAbsolute Value 絕對值\n\\[\n|a| = \\begin{cases}\n     a, & \\text{if } x \\geq 0 \\\\\n    -a, & \\text{if } x &lt; 0\n\\end{cases}\n\\]\n\nEven Function 偶數函數\nA function \\(f\\) satisfies \\(f(-x)=f(x)\\) for every element \\(x\\) at its domain.\n域中每個元素 \\(x\\) 都滿足 \\(f(-x)=f(x)\\) 的函數。\nIts graph is symmetry respect to y-axis.\n其圖形是相對於y軸對稱的。\n\n\n\nEven Fucntion\n\n\nOdd Function 奇數函數\nA function \\(f\\) satisfies \\(f(-x)=-f(x)\\) for every element \\(x\\) at its domain.\n域中每個元素 \\(x\\) 都滿足 \\(f(-x)=-f(x)\\) 的函數。\nIts graph is symmetry about the origin.\n其圖形是相對於原點對稱的。\n\n\n\nOdd function\n\n\n\nIncreasing Function 遞增函數\nA function \\(f\\) is increasing on an interval \\(I\\) if \\(f(x_1)&lt;f(x_2), x_1&lt;x_2\\) in \\(I\\).\n如果在 \\(I\\) 中 \\(x_1&lt;x_2\\)，且\\(f(x_1)&lt;f(x_2)\\)，則函數f 在區間 \\(I\\) 上遞增。\n\n\n\nIncreasing Fucntion\n\n\nDecreasing Function 遞減函數\nA function \\(f\\) is decreasing on an interval \\(I\\) if \\(f(x_1)&gt;f(x_2), x_1&lt;x_2\\) in \\(I\\).\n如果在 \\(I\\) 中 \\(x_1&lt;x_2\\)，且\\(f(x_1)&gt;f(x_2)\\)，則函數f 在區間 \\(I\\) 上遞減。\n\n\n\nDecreasing Function"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Project",
    "section": "",
    "text": "Last trimester, I have done project about Object Oriented Programming that make the game.\nBelow is some code from the project:\npublic abstract class Entity \n{\n    // Attributes\n    private int entityid;\n    private float posx;\n    private float posy;\n    private float speed;\n    private Texture texture;\n    private float width;\n    private float height;\n    private Vector2 direction;\n    private Rectangle boundingBox;\n    private SpriteBatch batch;\n    private ShapeRenderer shape;\n\n    // Constructor\n    public Entity(int entityid, float posx, float posy, float speed, String texturePath, float width, float height) \n    {\n        this.entityid = entityid;\n        this.posx = posx;\n        this.posy = posy;\n        this.speed = speed;\n        this.texture = new Texture (Gdx.files.internal(texturePath));\n        this.width = width;\n        this.height = height;\n        float randomAngle = MathUtils.random(0f, MathUtils.PI2);\n        this.direction = new Vector2(MathUtils.cos(randomAngle), MathUtils.sin(randomAngle));\n        this.boundingBox = new Rectangle(this.getPosx(), this.getPosy(), this.getWidth(), this.getHeight());\n        this.batch = new SpriteBatch();\n        this.shape = new ShapeRenderer();\n    }\n\n    // Method: Set Entity ID\n    public void setEntityid(int entityid)\n    {\n        this.entityid = entityid;\n    }\n    \n    // Method: Get Entity ID\n    public int getEntityid()\n    {\n        return entityid;\n    }"
  }
]